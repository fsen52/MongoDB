////==================================================================================
////                                  AGGREGATION
////==================================================================================
// 1) Aggregation, dokumanlardaki verilerin islenmesi ve hesaplanan 
//    sonuclarin donmesini saglayan islemlerdir. 
//
// 2) Aggregation islemleri, farklı dokumanlardaki degerleri gruplandirabilir.
//
// 3) Bu gruplanan veriler uzerinde cesitli islemlerin gereceklestirelerek tek 
//    bir sonuc degerinin donmesi saglanabilir.
//
//  4) MongoDB, 3 farklı yontem ile aggregation gerceklestirmeye izin verir.
//     A) aggregation pipeline (toplama boru hattı)
//     B) map-reduce function (map indirgeme)
//     C) single-purpose aggregation (tek-amaç toplama)
//
//  5) Aggregiation, SQL'deki Join islemlerine benzetilebilir. 
//
//     SQL         MONGO
//----------------------
//     WHERE       $match
//     GROUP BY 	 $group
//     HAVING	     $match
//     SELECT	     $project
//     ORDER BY    $sort
//     LIMIT	     $limit
//     SUM()	     $sum
//     COUNT()	   $count, $sum
//     JOIN	       $lookup
//     MERGE 	     $merge (MongoDB 4.2 ve sonrasi)
////aggregation (sum,max,avg vs) yaparken bi field (column) kullanacaksak syntax ı ==> "$urunAdi" şeklinde===================================================================
​
///==================================================================================
////                          AGGREGATION PIPELINE
////==================================================================================
// SYNTAX
// 
//   pipeline = [
 //   { $match : { … },
 //   { $group : { … },
 //   { $sort : { … },
//      ...
//   ]
//   db.collectionName.aggregate(pipeline, options)
//
//  $match() – Verileri secerken flitrelemek icin
//  $group({_id : "$field"}) - islenen verilerin grupplanmasi icin 
//  $sort()  Sonuclarin siralanmasi icin
​
////---------------------------------------------------------------------------------
//// 1) "KISILER" veritabaninda "ogrenciler" collection'i tanimlayalim. 
////---------------------------------------------------------------------------------
​
use("KISILER")
//db.ogrenciler.find()
//  db.people.drop();
 //db.createCollection("ogrenciler")
// use("kisiler");
// db.createCollection("ogrenciler");
​
// //---------------------------------------------------------------------------------
// // 2) asagidaki dokumanlari collection'a kaydedelim.   
// //---------------------------------------------------------------------------------
use("KISILER");
db.ogrenciler.insertMany([
{"isim": "Tarik ", "yas":57, "sube": "A", "not":97, "dersler":["fizik", "mat"]}, 
{"isim": "Selim", "yas":37, "sube": "A","not":77,},
{"isim": "Nalan", "yas":17, "sube": "B","not":55, "dersler":["fizik", "ingilizce"]},
{"isim": "Burhan", "yas":21, "sube": "B","not":43, "dersler":["fizik", "mat"]},
{"isim": "Niyazi", "yas":40, "sube": "B","not":99, "dersler":["ingilizce"]},
{"isim": "Galip", "yas":37, "sube": "A","not":34, "dersler":["ingilizce"]},
{"isim": "Teslime", "yas":24, "sube": "A","not":88, "dersler":["mat","fizik","kimya"]}]);

//3) Dersleri ingilizce yaşı 50 den küçük olanlar

use("KISILER");
db.ogrenciler.aggregate({$match:{dersler:["ingilizce"],yas:{$lt:50}}} )

db.ogrenciler.find({dersler:["ingilizce"],yas:{$lt:50}})

//4) B subesindeki ogrenci sayısını bulunuz

use("KISILER")
db.ogrenciler.aggregate({$match:{sube:"B"}},{$count:"B subesi mevcudu"})

/// 5) Tum subelerdeki toplam ogrenci sayisini hesaplayan sorguyu yaziniz.
////    Count bir grup icin 1 sayisinin donmesini ve bunlarin toplanmasini saglar.
// count:tek sonuç ,mesela B sınıfındaki.....ler..
// sum:A daki...ler, B deki...ler birer birer toplanır
////---------------------------------------------------------------------------------
 ////    NOT: Group isleminde degiskenlerin onune $ isareti konulmalidir.
 //  id den sonra dersler, not vs de olabilir, 
 //burada şubeye göre grupla=$group:{_id:"$sube"}}

use("KISILER");
db.ogrenciler.aggregate({$group:{_id:"$sube",toplamOgrenci:{$sum:1}}})

//6) Tum subelerdeki toplam ogrenci sayıları ve her subedeki max notu hesaplayın

use("KISILER");
db.ogrenciler.aggregate({$group:{_id:"$sube", toplamOgrenci:{$sum:1}, maksNot:{$max:"$not"}}})

//7) Yası 30 dan kucuk olanların subelere göre not ortalamalarını hesaplayın

use("KISILER");
db.ogrenciler.aggregate([{$match:{yas:{$lt:30}}},{$group:{_id:"$sube", ortalamaNot:{$avg:"$not"}}}])

//8) Ingilizce dersini alanların subelere göre sayıları
use("KISILER")
db.ogrenciler.aggregate([{$match:{dersler:"ingilizce"}},{$group:{_id:"$sube", ingAlanlarınSayısı:{$sum:1}}}])


//9) Sadece fizik ve matematik alanların subelere gore sayısı

use("KISILER")
db.ogrenciler.aggregate([{$match:{dersler:["fizik","mat"]}},{$group:{_id:"$sube", fizMatAlanlarınSayısı:{$sum:1}}}])

//10) fizik veya mat alanların sayısı

use("KISILER")
//db.ogrenciler.aggregate([{$match:{$or:[{dersler:"fizik"},{dersler:"mat"}]}},{$group:{_id:"$sube", fizVeyaMatAlanlarınSayısı:{$sum:1}}}]);
db.ogrenciler.aggregate([{$match:{dersler:{$in:["fizik","mat"]}}},{$group:{_id:"$sube", fizVeyaMatAlanlarınSayısı:{$sum:1}}}])


//11) A subesindeki ogrencileri yasa gore azalan, nota gore yukselen sırada yazdırın

use("KISILER")
db.ogrenciler.aggregate([{$match:{sube:"A"}},{$sort:{yas:-1,not:1}}])

use("KISILER")
db.ogrenciler.aggregate({$match:{sube:"A"}}).sort({yas:-1,not:1})

//// 12) MEDYA veritabanı altında hesaplar ismiyle yeni bir collection olusturunuz
//       ve degerleri girginiz.
////---------------------------------------------------------------------------------
use("MEDYA")
db.hesaplar.insertMany(
[{"isim" : "ali", "harcamalar":[-80, -40, -50, -120], "kazanc":[100, 150]},
{"isim" : "Can", "harcamalar" : [-60, -30, -20], "kazanc" : [200, 50, 130] },
{"isim" : "Canan", "harcamalar" : [-80, -40, -50], "kazanc" : [300, 450] },
{"isim" : "Betul", "harcamalar" : [-80, -120], "kazanc" : [500, 50, 70, 10] },
{"isim" : "Ahsen", "harcamalar" : [-140, -50, -120], "kazanc" : [400] },
{"isim" : "Su", "harcamalar" : [-120], "kazanc" : [22, 375, 65] },
{"isim" : "Pelin", "harcamalar" : [-180, -40, -70, -12], "kazanc" : [500, 650, 400]}]); 


//13) toplam harcama, toplam kazanc, ve bakiyeyi hesaplayarak tabloya ekleyin


pipeline=[
   {$addFields:{ toplamHarcama:{$sum:"$harcamalar"}, toplamKazanc:{$sum:"$kazanc"}}},
   {$addFields:{bakiye: {$add:["$toplamKazanc","$toplamHarcama"]}}},
   {$project:{harcamalar:0, kazanc:0, _id:0}}




]

use("MEDYA")
db.hesaplar.aggregate(pipeline)